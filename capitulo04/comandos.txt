# Cómo obtener el contenido descargable del libro.
## Descargar como ZIP desde GitHub.
https://github.com/blancazure/trincheras-docker

## Clonar el repositorio usando Git.
git clone https://github.com/blancazure/trincheras-docker.git

--------------------------------------------------------

# VirtualBox: La herramienta de virtualización.
## Instalación de VirtualBox en distintos sistemas operativos.
### Instalación de VirtualBox en Ubuntu / Debian.


sudo apt update
curl https://www.virtualbox.org/download/oracle_vbox_2016.asc | gpg --dearmor > oracle_vbox_2016.gpg
curl https://www.virtualbox.org/download/oracle_vbox.asc | gpg --dearmor > oracle_vbox.gpg
sudo install -o root -g root -m 644 oracle_vbox_2016.gpg /etc/apt/trusted.gpg.d/
sudo install -o root -g root -m 644 oracle_vbox.gpg /etc/apt/trusted.gpg.d/
echo "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian $(lsb_release -sc) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
sudo apt update
sudo apt install -y linux-headers-$(uname -r) dkms
sudo apt install virtualbox-7.0 -y
virtualbox --help


Instalación de VirtualBox en Fedora 
--------------------------------------------------------
sudo dnf install wget curl gcc make perl bzip2 dkms kernel-devel kernel-headers  -y
rpm -q kernel-devel 
uname -r
sudo dnf update -y
sudo wget http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -P /etc/yum.repos.d/
sudo rpm --import https://www.virtualbox.org/download/oracle_vbox.asc
dnf search virtualbox
sudo dnf install VirtualBox-7.0 -y
sudo /sbin/vboxconfig
virtualbox --help


Instalación de VirtualBox en Rockylinux
--------------------------------------------------------
sudo dnf install epel-release -y
sudo dnf install wget curl gcc make perl bzip2 dkms kernel-devel kernel-headers  -y
rpm -q kernel-devel 
uname -r
sudo dnf update -y
sudo reboot now
sudo dnf config-manager --add-repo=https://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo
dnf search virtualbox
sudo dnf install VirtualBox-7.0 -y
sudo /sbin/vboxconfig
virtualbox --help


Instalación de VirtualBox en Windows.
--------------------------------------------------------
https://www.virtualbox.org/wiki/Downloads


Instalación de VirtualBox en MacOS.
--------------------------------------------------------
https://www.virtualbox.org/wiki/Downloads


Instalación de Vagrant en Ubuntu / Debian.
--------------------------------------------------------
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install -y curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update
sudo apt-get install vagrant
vagrant --versión

Instalación de Vagrant en Fedora.
--------------------------------------------------------
sudo yum update
sudo dnf install -y vagrant
vagrant --version

Instalación de Vagrant en RockyLinux
--------------------------------------------------------
sudo dnf group install -y "virtualization hypervisor"
sudo dnf group install -y "virtualization tools"
sudo systemctl enable --now libvirtd
sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
sudo dnf install -y vagrant
sudo dnf config-manager --set-enabled crb
sudo dnf install -y libvirt-devel
##vagrant plugin install vagrant-libvirt
vagrant --version


Instalación de Vagrant en Windows.
--------------------------------------------------------
https://www.vagrantup.com
cmd
powershell
vagrant --version

--------------------------------------------------------
Instalación de Vagrant en MacOS.
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install --cask vagrant
vagrant --version

Creación y configuración de un Vagrantfile.
--------------------------------------------------------

Paso 1: Crear un directorio para el proyecto.
mkdir ejemplo-vagrantfile-01
cd ejemplo-vagrantfile-01

Paso 2: Inicializar un nuevo proyecto Vagrant.
vagrant init

Paso 3: Editar el archivo Vagrantfile.
Vagrant.configure("2") do |config|
  # Definir una caja base (una imagen de sistema operativo)
  config.vm.box = "ubuntu/bionic64"

  # Configurar la primera máquina virtual
  config.vm.define "ubuntu1" do |ubuntu1|
    ubuntu1.vm.hostname = "ubuntu1"
    ubuntu1.vm.network "private_network", ip: "192.168.100.11"
  end

  # Configurar la segunda máquina virtual
  config.vm.define "ubuntu2" do |ubuntu2|
    ubuntu2.vm.hostname = "ubuntu2"
    ubuntu2.vm.network "private_network", ip: "192.168.100.12"
  end
end

Paso 4: Provisión y gestión de máquinas virtuales.
vagrant up

vagrant ssh ubuntu1
lsb_release -a
exit

vagrant halt
vagrant destroy

--------------------------------------------------------
Principales comandos para trabajar con Vagrant.

Paso 1: Crear el directorio del proyecto.
mkdir ejemplo-vagrantfile-02
cd ejemplo-vagrantfile-02

Paso 2: Inicializar Vagrant y crear el Vagrantfile.
vagrant init

Paso 3: Editar el Vagrantfile.
Vagrant.configure("2") do |config|
  # Definir una caja base (una imagen de sistema operativo)
  config.vm.box = "ubuntu/bionic64"

  # Configurar la máquina virtual
  config.vm.define "ubuntu3" do |ubuntu3|
    ubuntu3.vm.hostname = "ubuntu3"
    ubuntu3.vm.network "private_network", ip: "192.168.100.12"
  end
end


Inicialización de Vagrant.
vagrant init  
vagrant init ubuntu/trusty64

Gestión de la máquina virtual.
vagrant up
vagrant suspend
vagrant resume
vagrant halt
vagrant provision
vagrant reload
vagrant reload --provision

Conexión y ejecución de comandos.
vagrant ssh ubuntu3
exit
vagrant ssh -c "ifconfig" ubuntu3

Listado y estado de las máquinas virtuales.
vagrant box list
vagrant global-status --prune

Gestión de las cajas (boxes).
vagrant box add ubuntu/bionic64
vagrant box outdated
vagrant box update
vagrant box remove ubuntu/bionic64

Destrucción y recreación de máquinas virtuales.
vagrant destroy
vagrant destroy -f && vagrant up

Empaquetado de máquinas virtuales.
vagrant package

Snapshots
vagrant snapshot push
vagrant snapshot list
vagrant snapshot pop
vagrant snapshot save mi_snapshot
vagrant snapshot restore mi_snapshot
vagrant snapshot delete mi_snapshot

Puertos y estado.
vagrant port
vagrant status

--------------------------------------------------------
Crear el entorno de laboratorio con Vagrant y VirtualBox.

Vagrant.configure("2") do |config|
  # Configuración base para todas las máquinas
  config.vm.provider "virtualbox" do |vb|
    vb.check_guest_additions = false 
    vb.memory = "2048"
    vb.cpus = 2
    vb.gui = false
  end

  # Establece el tiempo máximo de espera de inicio en 600s
  config.vm.boot_timeout = 600

  # Configuración de la máquina Ubuntu
  config.vm.define "vm-lab-ubuntu" do |ubuntu|
    ubuntu.vm.box = "bento/ubuntu-24.04"
    ubuntu.vm.box_check_update = true
    ubuntu.vm.hostname = "vm-lab-docker-ubuntu"
    ubuntu.vm.network "private_network", ip: "192.168.100.101"
    ubuntu.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get upgrade -y
    SHELL
    ubuntu.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-ubuntu"
    end
  end

  # Configuración de la máquina Fedora
  config.vm.define "vm-lab-fedora" do |fedora|
    fedora.vm.box = "bento/fedora-latest"
    fedora.vm.box_check_update = true
    fedora.vm.hostname = "vm-lab-docker-fedora"
    fedora.vm.network "private_network", ip: "192.168.100.102"
    fedora.vm.provision "shell", inline: <<-SHELL
      dnf update -y
    SHELL
    fedora.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-fedora"
    end
  end

  # Configuración de la máquina Debian
  config.vm.define "vm-lab-debian" do |debian|
    debian.vm.box = "bento/debian-12"
    debian.vm.box_check_update = true
    debian.vm.hostname = "vm-lab-docker-debian"
    debian.vm.network "private_network", ip: "192.168.100.103"
    debian.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get upgrade -y
    SHELL
    debian.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-debian"
    end
  end

  # Configuración de la máquina CentOS
  config.vm.define "vm-lab-centos" do |centos|
    centos.vm.box = "bento/centos-stream-9"
    centos.vm.box_check_update = true
    centos.vm.hostname = "vm-lab-docker-centos"
    centos.vm.network "private_network", ip: "192.168.100.104"
    centos.vm.provision "shell", inline: <<-SHELL
      yum update -y
    SHELL
    centos.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-centos"
    end
  end
end

--------------------------------------------------------
Desplegar las máquinas virtuales del entorno de laboratorio.

Crear y acceder a la carpeta de trabajo.
mkdir trincheras-docker-lab
cd trincheras-docker-lab

Inicializa Vagrant en la carpeta.
vagrant init

Iniciar el despliegue de las máquinas.
vagrant up

Verificación desde la consola.    
vagrant ssh vm-lab-ubuntu
exit

--------------------------------------------------------
Guardar el estado inicial de las máquinas.
vagrant up

Crear snapshots de cada máquina virtual.
vagrant snapshot save vm-lab-ubuntu estado-0-instalacion
vagrant snapshot save vm-lab-fedora estado-0-instalacion
vagrant snapshot save vm-lab-debian estado-0-instalacion
vagrant snapshot save vm-lab-centos estado-0-instalacion

Verificar los snapshots creados.
vagrant snapshot list 


