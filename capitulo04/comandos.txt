Descargar como ZIP desde GitHub.
--------------------------------------------------------
https://github.com/blancazure/trincheras-docker

Clonar el repositorio usando Git.
--------------------------------------------------------
git clone https://github.com/blancazure/trincheras-docker.git

Instalación de VirtualBox en Ubuntu / Debian.
--------------------------------------------------------
sudo apt update
curl https://www.virtualbox.org/download/oracle_vbox_2016.asc | gpg --dearmor > oracle_vbox_2016.gpg
curl https://www.virtualbox.org/download/oracle_vbox.asc | gpg --dearmor > oracle_vbox.gpg
sudo install -o root -g root -m 644 oracle_vbox_2016.gpg /etc/apt/trusted.gpg.d/
sudo install -o root -g root -m 644 oracle_vbox.gpg /etc/apt/trusted.gpg.d/
echo "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian $(lsb_release -sc) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
sudo apt update
sudo apt install -y linux-headers-$(uname -r) dkms
sudo apt install virtualbox-7.0 -y
virtualbox --help

Instalación de VirtualBox en Fedora 
--------------------------------------------------------
sudo dnf install wget curl gcc make perl bzip2 dkms kernel-devel kernel-headers  -y
rpm -q kernel-devel 
uname -r
sudo dnf update -y
sudo reboot now
sudo wget http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -P /etc/yum.repos.d/
sudo rpm --import https://www.virtualbox.org/download/oracle_vbox_2016.asc
dnf search virtualbox
sudo dnf install VirtualBox-7.0 -y
sudo /sbin/vboxconfig
virtualbox --help

Instalación de VirtualBox en Rockylinux
--------------------------------------------------------
sudo dnf install epel-release -y
sudo dnf install wget curl gcc make perl bzip2 dkms kernel-devel kernel-headers  -y
rpm -q kernel-devel 
uname -r
sudo dnf update -y
sudo reboot now
sudo dnf config-manager --add-repo=https://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo
dnf search virtualbox
sudo dnf install VirtualBox-7.0 -y
sudo /sbin/vboxconfig
virtualbox --help

Instalación de VirtualBox en Windows.
--------------------------------------------------------
https://www.virtualbox.org/wiki/Downloads

Instalación de VirtualBox en MacOS.
--------------------------------------------------------
https://www.virtualbox.org/wiki/Downloads

Instalación de Vagrant en Ubuntu / Debian.
--------------------------------------------------------
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt-get update
sudo apt-get install vagrant -y
vagrant --versión

Instalación de Vagrant en Fedora.
--------------------------------------------------------
sudo yum update
sudo dnf install -y vagrant
vagrant --version

Instalación de Vagrant en RockyLinux
--------------------------------------------------------
sudo dnf group install -y "virtualization hypervisor"
sudo dnf group install -y "virtualization tools"
sudo systemctl enable --now libvirtd
sudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
sudo dnf install -y vagrant
sudo dnf config-manager --set-enabled crb
sudo dnf install -y libvirt-devel
vagrant plugin install vagrant-libvirt
vagrant --version

Instalación de Vagrant en Windows.
--------------------------------------------------------
https://www.vagrantup.com
cmd
powershell
vagrant --version

--------------------------------------------------------
Instalación de Vagrant en MacOS.
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install --cask vagrant
vagrant --version

Creación y configuración de un Vagrantfile básico.
--------------------------------------------------------
mkdir ejemplo-vagrantfile-01
cd ejemplo-vagrantfile-01
vagrant init

Vagrant.configure("2") do |config|
  # Definir una caja base (una imagen de sistema operativo)
  config.vm.box = " ubuntu/focal64"

  # Configurar la primera máquina virtual
  config.vm.define "ubuntu1" do |ubuntu1|
    ubuntu1.vm.hostname = "ubuntu1"
    ubuntu1.vm.network "private_network", ip: "192.168.100.11"
  end

  # Configurar la segunda máquina virtual
  config.vm.define "ubuntu2" do |ubuntu2|
    ubuntu2.vm.hostname = "ubuntu2"
    ubuntu2.vm.network "private_network", ip: "192.168.100.12"
  end
end

$ cp /trincheras-docker/capitulo04/vagrantfile-01/Vagrantfile .
vagrant up
vagrant ssh ubuntu1
lsb_release -a
exit
vagrant halt
vagrant destroy

Comandos esenciales para gestionar VMs con Vagrant.
--------------------------------------------------------
mkdir ejemplo-vagrantfile-02
cd ejemplo-vagrantfile-02
vagrant init

Vagrant.configure("2") do |config|
  # Definir una caja base (una imagen de sistema operativo)
  config.vm.box = "ubuntu/focal64"

  # Configurar la máquina virtual
  config.vm.define "ubuntu3" do |ubuntu3|
    ubuntu3.vm.hostname = "ubuntu3"
    ubuntu3.vm.network "private_network", ip: "192.168.100.13"
  end
end

cp /trincheras-docker/capitulo04/vagrantfile-02/Vagrantfile .

vagrant up
vagrant suspend
vagrant resume
vagrant halt
vagrant provision
vagrant reload --provision
vagrant ssh ubuntu3
exit
vagrant ssh -c "ifconfig" ubuntu3
vagrant box list
vagrant global-status --prune
vagrant box add ubuntu/bionic64
vagrant box outdated
vagrant box update
vagrant box remove ubuntu/bionic64
vagrant destroy
vagrant destroy -f && vagrant up
vagrant package ubuntu3 --output package-ubuntu3.box
vagrant snapshot push
vagrant snapshot list
vagrant snapshot pop
vagrant snapshot save mi_snapshot
vagrant snapshot restore mi_snapshot
vagrant snapshot delete mi_snapshot
vagrant port
vagrant status

Despliegue del laboratorio virtual con Vagrant y VirtualBox
--------------------------------------------------------

# Clonación del respositorio con los comandos y recursos desde GitHub
$git_trincheras_docker = <<-SCRIPT
  echo Clonando repositorio 'trincheras-docker' desde GitHub...
  git clone https://github.com/blancazure/trincheras-docker.git
  mkdir /home/vagrant/trincheras-docker/capitulo05/estructura/.directorio-oculto
  chown -R vagrant:vagrant trincheras-docker
SCRIPT

Vagrant.configure("2") do |config|
  # Configuración base para todas las VM
  config.vm.provider "virtualbox" do |vb|
    vb.check_guest_additions = false 
    vb.memory = "2048"
    vb.cpus = 2
    vb.gui = false
  end

  # Establece el tiempo máximo de espera de inicio en 600s
  config.vm.boot_timeout = 600

  # Configuración de la máquina Ubuntu
  config.vm.define "vm-lab-docker-ubuntu" do |ubuntu|
    ubuntu.vm.box = "ubuntu/focal64"
    ubuntu.vm.box_check_update = true
    ubuntu.vm.hostname = "vm-lab-docker-ubuntu"
    ubuntu.vm.network "private_network", ip: "192.168.100.101"
    for nPuerto in 50100..50120
      ubuntu.vm.network "forwarded_port", guest: nPuerto, host: nPuerto
    end
    ubuntu.vm.provision "shell", path: "./scripts/script-ubuntu.sh"
    ubuntu.vm.provision "shell", inline: $git_trincheras_docker
    ubuntu.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-ubuntu"
    end
  end

  # Configuración de la máquina Fedora
  config.vm.define "vm-lab-docker-fedora" do |fedora|
    fedora.vm.box = "fedora/38-cloud-base"
    fedora.vm.box_check_update = true
    fedora.vm.hostname = "vm-lab-docker-fedora"
    fedora.vm.network "private_network", ip: "192.168.100.102"
    for nPuerto in 50200..50220
      fedora.vm.network "forwarded_port", guest: nPuerto, host: nPuerto
    end
    fedora.vm.provision "shell", path: "./scripts/script-fedora.sh"
    fedora.vm.provision "shell", inline: $git_trincheras_docker
    fedora.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-fedora"
    end
  end

  # Configuración de la máquina Debian
  config.vm.define "vm-lab-docker-debian" do |debian|
    debian.vm.box = "debian/bookworm64"
    debian.vm.box_check_update = true
    debian.vm.hostname = "vm-lab-docker-debian"
    debian.vm.network "private_network", ip: "192.168.100.103"
    for nPuerto in 50300..50320
      debian.vm.network "forwarded_port", guest: nPuerto, host: nPuerto
    end
    debian.vm.provision "shell", path: "./scripts/script-debian.sh"    
    debian.vm.provision "shell", inline: $git_trincheras_docker
    debian.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-debian"
    end
  end

  # Configuración de la máquina Rocky Linux
  config.vm.define "vm-lab-docker-rocky" do |rocky|
    rocky.vm.box = "bento/rockylinux-9.0"
    rocky.vm.box_check_update = true
    rocky.vm.hostname = "vm-lab-docker-rocky"
    rocky.vm.network "private_network", ip: "192.168.100.104"
    for nPuerto in 50400..50420
      rocky.vm.network "forwarded_port", guest: nPuerto, host: nPuerto
    end
    rocky.vm.provision "shell", path: "./scripts/script-rocky.sh"    
    rocky.vm.provision "shell", inline: $git_trincheras_docker
    rocky.vm.provider "virtualbox" do |v|
      v.name = "vm-lab-docker-rocky"
    end
  end
end

mkdir trincheras-docker-lab
cd trincheras-docker-lab
cp -r /trincheras-docker/capitulo04/trincheras-docker-lab .
vagrant up
vagrant status
vagrant ssh vm-lab-docker-ubuntu
cat /etc/os-release
exit